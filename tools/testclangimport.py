
import subprocess
import sys
import json

def get_clang_json(filename):
    return subprocess.check_output('clang -fsyntax-only -Xclang -ast-dump=json -fno-color-diagnostics'.split() + [filename])

ids = {}

def simplify_ast(j):
    if ('name' in j) and j['kind'] == 'TypedefDecl' and j['name'].startswith('__'):
        return None
    ret = {}
    if 'kind' not in j:
        return ret
    ret['kind'] = j['kind']
    for k in ('name', 'value', 'completeDefinition', 'explicitlyDefaulted', 'init', 'inline',
              'isPostfix', 'opcode', 'storageClass', 'tagUsed'):
        if k in j:
            ret[k] = j[k]
    for kid in ('id', 'declId', 'referencedMemberDecl', 'targetLabelDeclId'):
        if kid in j:
            if j[kid] not in ids:
                # Assign a new id to this decl
                ids[j[kid]] = '0x%x' % (1 + len(ids))
            ret[kid] = ids[j[kid]]
    for t in ('type', 'fixedUnderlyingType', 'argType'):
        if (t in j) and 'qualType' in j[t]:
            ret[t] = { 'qualType': j[t]['qualType'] }

    if 'referencedDecl' in j:
        ref_name = j['referencedDecl']['name']
        ref_id = ids[j['referencedDecl']['id']]
        ret['referencedDecl'] = { 'name': ref_name, 'id': ref_id }
    if 'inner' not in j:
        return ret
    ret['inner'] = []
    for inner in j['inner']:
        x = simplify_ast(inner)
        if x is not None:
            ret['inner'].append(x)
    return ret

filename = '1.c' if len(sys.argv) <= 1 else sys.argv[-1]

test_json = simplify_ast(json.loads(get_clang_json(filename)))

with open(filename, 'rt') as f:
    code = f.read().replace('\r', ' ').replace('\n', ' ').replace('  ', ' ')

s = json.dumps(test_json).replace('{"kind":', '\n            {"kind":')
print('        // This json dump was generated by tools/testclangimport.py')
print('        // code: ' + code.strip())
print('        const char clang_json[] = R"C(' + s + ')C";')
